using Aplicacao.CEP;
using Aplicacao.Comando;
using Aplicacao.Consulta;
using Aplicacao.Interfaces;
using Aplicacao.Model.Cliente;
using Aplicacao.Model.DocumentoIdentificacaoCliente;
using Aplicacao.Model.EnderecoCliente;
using Aplicacao.Model.IntencaoOperacao;
using Aplicacao.Model.RendimentoCliente;
using Aplicacao.Model.TelefoneCliente;
using Aplicacao.Servico;
using B.Arquivo;
using B.Configuracao;
using Dominio;
using FluentValidation;
using Infraestrutura;
using Infraestrutura.Consignado;
using Infraestrutura.Consulta;
using Infraestrutura.Fila.Email;
using Infraestrutura.Fila.Sms;
using Infraestrutura.Fila.TorpedoVoz;
using Infraestrutura.Fila.Whatsapp;
using Infraestrutura.Inicializacao;
using Infraestrutura.Providers;
using Infraestrutura.Providers.Auth;
using Infraestrutura.Providers.BemApi;
using Infraestrutura.Providers.Cliente;
using Infraestrutura.Providers.Consignado;
using Infraestrutura.Providers.IcatuApi;
using Infraestrutura.Providers.Kaledo;
using Infraestrutura.Providers.Paperless;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace Aplicacao
{
    public static class IoC
    {
        public static IServiceCollection ConfigurarDependencias(this IServiceCollection services, Configuracao configuracao)
        {
            services.AddTransient<FeatureFlagServico>();
            services.AddTransient<LeadServico>();
            services.AddTransient<LeadCorrespondenteServico>();
            services.AddTransient<LojaServico>();
            services.AddTransient<IUsuarioServico, UsuarioServico>();
            services.AddTransient<IClienteServico, ClienteServico>();
            services.AddTransient<ClienteImportacaoServico>();
            services.AddTransient<IParametroOperacaoServico, ParametroOperacaoServico>();
            services.AddTransient<IAnexoServico, AnexoServico>();
            services.AddTransient<IAutenticacaoServicoBase, AutenticacaoServicoBase>();
            services.AddTransient<IAutenticacaoServico, AutenticacaoServico>();
            services.AddTransient<IAutenticacaoLoginSocialServico, AutenticacaoLoginSocialServico>();
            services.AddTransient<IProviderAzure, ProviderAzure>();
            services.AddTransient<IConsignadoServico, ConsignadoServico>();
            services.AddTransient<ConvenioServico>();
            services.AddTransient<ProdutoServico>();
            services.AddTransient<TipoOperacaoServico>();
            services.AddTransient<SituacaoIntencaoOperacaoServico>();
            services.AddTransient<IEmailServico, EmailServico>();
            services.AddTransient<ITemplateEmailServico, TemplateEmailServico>();
            services.AddTransient<TemplateBuilderServico>();
            services.AddTransient<INotificacaoServico, NotificacaoServico>();
            services.AddTransient<ISmsServico, SmsServico>();
            services.AddTransient<ITorpedoVozServico, TorpedoVozServico>();
            services.AddTransient<IWhatsappServico, WhatsappServico>();
            services.AddTransient<IntencaoOperacaoServico>();
            services.AddTransient<BancarioServico>();
            services.AddTransient<TipoVinculoInstitucionalServico>();
            services.AddTransient<ILocalizacaoServico, LocalizacaoServico>();
            services.AddTransient<TelefoneClienteServico>();
            services.AddTransient<DocumentoIdentificacaoClienteServico>();
            services.AddTransient<SeguroParentescoServico>();
            services.AddTransient<EnderecoClienteServico>();
            services.AddTransient<RendimentoClienteServico>();
            services.AddTransient<BeneficioInssQuery>();
            services.AddTransient<BeneficioInssAutorizacaoVigenteQuery>();
            services.AddTransient<BeneficioInssReenvioTokenCommand>();
            services.AddTransient<BeneficioInssSolicitacaoAutorizacaoCommand>();
            services.AddTransient<BeneficioInssValidacaoTokenCommand>();
            services.AddTransient<ITermoServico, TermoServico>();
            services.AddTransient<IRendimentoClienteServico, RendimentoClienteServico>();
            services.AddTransient<IContaClienteServico, ContaClienteServico>();
            services.AddTransient<IPropostaServico, PropostaServico>();
            services.AddTransient<ISeguroProdutoServico, SeguroProdutoServico>();
            services.AddTransient<ISeguroCoberturaServico, SeguroCoberturaServico>();
            services.AddTransient<ISeguroPropostaServico, SeguroPropostaServico>();
            services.AddTransient<AcessoDadosPessoaisServico>();
            services.AddTransient<TelefoneClienteConfirmacaoServico>();
            services.AddTransient<BeneficioInssMensagemDeParaQuery>();
            services.AddTransient<SeguroProfissaoServico>();
            services.AddTransient<TipoRegimeCasamentoServico>();
            services.AddTransient<ConjugeServico>();
            services.AddTransient<TipoDocumentoServico>();
            services.AddTransient<IBiometriaServico, BiometriaServico>();
            services.AddTransient<IClubeBeneficioServico, ClubeBeneficioServico>();
            services.AddTransient<IDocumentoServico, DocumentoServico>();
            services.AddTransient<IValidator<ClienteModel>, ClienteModelValidacao>();
            services.AddTransient<IValidator<DocumentoIdentificacaoClienteModel>, DocumentoIdentificacaoClienteModelValidacao>();
            services.AddTransient<IValidator<EnderecoClienteModel>, EnderecoClienteModelValidacao>();
            services.AddTransient<IValidator<RendimentoClienteModel>, RendimentoClienteModelValidacao>();
            services.AddTransient<IValidator<TelefoneClienteModel>, TelefoneClienteModelValidacao>();
            services.AddTransient<IValidator<IntencaoOperacaoCriacaoModel>, IntencaoOperacaoCriacaoModelValidacao>();
            services.AddTransient<IValidator<CepEnvioModel>, CepEnvioModelValidacao>();
            services.AddScoped<InicializadorDb>();
            services.AddScoped<IProviderMaxMind, ProviderMaxMind>();
            services.AddScoped<IProvedorArquivo, ProvedorArquivoAzure>();
            services.AddScoped<IProviderConsignado, ProviderConsignado>();
            services.AddScoped<IProviderAutenticacao, ProviderAutenticacao>();
            services.AddScoped<IProviderCliente, ProviderCliente>();
            services.AddScoped<IProviderPaperless, ProviderPaperless>();
            services.AddScoped<IProviderBemApi, ProviderBemApi>();
            services.AddScoped<IProviderIcatu, ProviderIcatu>();
            services.AddScoped<IProviderKaledo, ProviderKaledo>();
            services.AddScoped<IProducerEmail, ProducerEmail>();
            services.AddScoped<IProducerSms, ProducerSms>();
            services.AddScoped<IProducerWhatsapp, ProducerWhatsapp>();
            services.AddScoped<IProducerTorpedoVoz, ProducerTorpedoVoz>();
            services.AddScoped<IUsuarioLogin, UsuarioLoginDominio>();
            services.AddScoped(x => new AesCryptography(configuracao.BuscarParametro("aes_key"), configuracao.BuscarParametro("aes_iv")));
            services.AddHttpClient();
            return services;
        }
    }
}