// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notifications.Infraestructure.Persistence;

namespace Notifications.Infraestructure.Migrations
{
    [DbContext(typeof(NotificationsContext))]
    partial class NotificationsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.BusinessAggregate.Business", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Cellphone")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.NotificationAggregate.BusinessNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Viewed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("_businessId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_businessId");

                    b.ToTable("BusinessNotification");
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.NotificationAggregate.NotificationChannel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("NotificationChannels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "platform"
                        },
                        new
                        {
                            Id = 2,
                            Name = "push"
                        },
                        new
                        {
                            Id = 3,
                            Name = "email"
                        },
                        new
                        {
                            Id = 4,
                            Name = "sms"
                        });
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.NotificationAggregate.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("Viewed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("_userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_userId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.UserAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Cellphone")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cellphone = "",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(7567),
                            Email = "arthur.muller@capwise.com.br",
                            Name = "Arthur Silva Muller",
                            UpdateDate = new DateTime(2023, 1, 2, 22, 25, 56, 41, DateTimeKind.Unspecified).AddTicks(5681)
                        },
                        new
                        {
                            Id = 2,
                            Cellphone = "",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8970),
                            Email = "pablo@capwise.com.br",
                            Name = "Pablo Maino",
                            UpdateDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8935)
                        },
                        new
                        {
                            Id = 3,
                            Cellphone = "",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8983),
                            Email = "arthur@capwise.com.br",
                            Name = "Arthur Decker",
                            UpdateDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8977)
                        },
                        new
                        {
                            Id = 4,
                            Cellphone = "",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8996),
                            Email = "",
                            Name = "",
                            UpdateDate = new DateTime(2023, 1, 2, 22, 25, 56, 44, DateTimeKind.Unspecified).AddTicks(8990)
                        });
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.BusinessAggregate.Business", b =>
                {
                    b.OwnsMany("Notifications.Domain.AggregatesModel.BusinessAggregate.BusinessOwner", "Owners", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("_businessId")
                                .HasColumnType("int");

                            b1.Property<int>("_userId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_businessId");

                            b1.HasIndex("_userId");

                            b1.ToTable("BusinessOwners");

                            b1.WithOwner()
                                .HasForeignKey("_businessId");

                            b1.HasOne("Notifications.Domain.AggregatesModel.UserAggregate.ApplicationUser", "User")
                                .WithMany()
                                .HasForeignKey("_userId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("User");
                        });

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.NotificationAggregate.BusinessNotification", b =>
                {
                    b.HasOne("Notifications.Domain.AggregatesModel.BusinessAggregate.Business", "BusinessOwner")
                        .WithMany()
                        .HasForeignKey("_businessId");

                    b.OwnsMany("Notifications.Domain.AggregatesModel.NotificationAggregate.NotificationChannelRecord", "Channels", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("_channelId")
                                .HasColumnType("int");

                            b1.Property<int>("_notificationId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_channelId");

                            b1.HasIndex("_notificationId");

                            b1.ToTable("BusinessNotificationChannelRecords");

                            b1.HasOne("Notifications.Domain.AggregatesModel.NotificationAggregate.NotificationChannel", "Channel")
                                .WithMany()
                                .HasForeignKey("_channelId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("_notificationId");

                            b1.Navigation("Channel");
                        });

                    b.OwnsMany("Notifications.Domain.AggregatesModel.NotificationAggregate.Recipient", "Recipients", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Cellphone")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext");

                            b1.Property<int>("_notificationId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_notificationId");

                            b1.ToTable("BusinessNotificationRecipients");

                            b1.WithOwner()
                                .HasForeignKey("_notificationId");
                        });

                    b.Navigation("BusinessOwner");

                    b.Navigation("Channels");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("Notifications.Domain.AggregatesModel.NotificationAggregate.UserNotification", b =>
                {
                    b.HasOne("Notifications.Domain.AggregatesModel.UserAggregate.ApplicationUser", "UserOwner")
                        .WithMany()
                        .HasForeignKey("_userId");

                    b.OwnsMany("Notifications.Domain.AggregatesModel.NotificationAggregate.NotificationChannelRecord", "Channels", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime>("CreatedDate")
                                .HasColumnType("datetime(6)");

                            b1.Property<int>("_channelId")
                                .HasColumnType("int");

                            b1.Property<int>("_notificationId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_channelId");

                            b1.HasIndex("_notificationId");

                            b1.ToTable("UserNotificationChannelRecords");

                            b1.HasOne("Notifications.Domain.AggregatesModel.NotificationAggregate.NotificationChannel", "Channel")
                                .WithMany()
                                .HasForeignKey("_channelId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("_notificationId");

                            b1.Navigation("Channel");
                        });

                    b.OwnsMany("Notifications.Domain.AggregatesModel.NotificationAggregate.Recipient", "Recipients", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("Cellphone")
                                .HasColumnType("longtext");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext");

                            b1.Property<int>("_notificationId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_notificationId");

                            b1.ToTable("UserNotificationRecipients");

                            b1.WithOwner()
                                .HasForeignKey("_notificationId");
                        });

                    b.Navigation("Channels");

                    b.Navigation("Recipients");

                    b.Navigation("UserOwner");
                });
#pragma warning restore 612, 618
        }
    }
}
