// <auto-generated />
using System;
using ExternalEntities.Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExternalEntities.Infraestructure.Migrations
{
    [DbContext(typeof(ExternalEntitiesContext))]
    [Migration("20230103012737_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.BusinessAggregate.Business", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.CreditScoringAggregate.BusinessScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PaymentCommitmentScore")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileScore")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("BusinessScore");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.CreditScoringAggregate.UserScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int?>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PaymentCommitmentScore")
                        .HasColumnType("int");

                    b.Property<int?>("ProfileScore")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("UserScore");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.UserAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Cpf")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserUpdate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "02981603078",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(5356),
                            UpdateDate = new DateTime(2023, 1, 2, 22, 27, 37, 248, DateTimeKind.Unspecified).AddTicks(6607)
                        },
                        new
                        {
                            Id = 2,
                            Cpf = "77735936044",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6298),
                            UpdateDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6271)
                        },
                        new
                        {
                            Id = 3,
                            Cpf = "40755899008",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6310),
                            UpdateDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6305)
                        },
                        new
                        {
                            Id = 4,
                            Cpf = "71096627051",
                            CreatedDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6393),
                            UpdateDate = new DateTime(2023, 1, 2, 22, 27, 37, 251, DateTimeKind.Unspecified).AddTicks(6386)
                        });
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.BusinessAggregate.Business", b =>
                {
                    b.OwnsMany("ExternalEntities.Domain.AggregatesModel.BusinessAggregate.BusinessOwner", "Owners", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("_businessId")
                                .HasColumnType("int");

                            b1.Property<int>("_userId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("_businessId");

                            b1.HasIndex("_userId");

                            b1.ToTable("BusinessOwners");

                            b1.WithOwner()
                                .HasForeignKey("_businessId");

                            b1.HasOne("ExternalEntities.Domain.AggregatesModel.UserAggregate.ApplicationUser", "User")
                                .WithMany()
                                .HasForeignKey("_userId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("User");
                        });

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.CreditScoringAggregate.BusinessScore", b =>
                {
                    b.HasOne("ExternalEntities.Domain.AggregatesModel.BusinessAggregate.Business", null)
                        .WithMany("Scores")
                        .HasForeignKey("BusinessId");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.CreditScoringAggregate.UserScore", b =>
                {
                    b.HasOne("ExternalEntities.Domain.AggregatesModel.UserAggregate.ApplicationUser", null)
                        .WithMany("Scores")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.BusinessAggregate.Business", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("ExternalEntities.Domain.AggregatesModel.UserAggregate.ApplicationUser", b =>
                {
                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
